{"version":3,"sources":["components/NavBar.js","utils/API.js","components/EmployeeCard.js","components/SearchBar.js","components/Table.js","App.js","index.js"],"names":["NavBar","className","axios","get","EmployeeCard","props","alt","FirstName","src","picture","LastName","DoB","Email","SearchBar","value","search","type","onChange","handleInputChange","placeholder","id","Table","state","Employees","results","loadEmployees","API","then","res","setState","data","catch","err","console","log","event","target","handleFilter","this","map","employee","name","first","employeeFile","filter","thumbnail","last","email","dob","age","login","md5","Component","App","ReactDOM","render","document","getElementById"],"mappings":"uJAaeA,MAXf,WACI,OACI,qBAAKC,UAAU,YAAf,SACI,sBAAKA,UAAU,YAAf,UACI,oDACA,qG,iDCJD,EACC,WACZ,OAAOC,IAAMC,IAJD,0CCWCC,MAVjB,SAAsBC,GAClB,OACE,gCACG,qBAAKC,IAAKD,EAAME,UAAWC,IAAKH,EAAMI,UACpCJ,EAAME,UAFX,IAEuBF,EAAMK,SAF7B,UAE8CL,EAAMM,IAFpD,YAEkEN,EAAMO,UCuB/DC,MA3Bf,SAAmBR,GACjB,OACE,sBAAMJ,UAAU,SAAhB,SACE,qBAAKA,UAAU,aAAf,SAEE,uBACEa,MAAOT,EAAMU,OACbC,KAAK,OACLC,SAAUZ,EAAMa,kBAChBjB,UAAU,eACVkB,YAAY,uBACZC,GAAG,gBC6DEC,E,4MApEXC,MAAQ,CACJC,UAAW,GACXR,OAAQ,GACRS,QAAS,I,EAQbC,cAAgB,WACZC,IACKC,MAAK,SAAAC,GAAG,OACL,EAAKC,SAAS,CACVN,UAAWK,EAAIE,KAAKN,aAG3BO,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,O,EAIlCd,kBAAoB,SAAAiB,GAChB,EAAKN,SAAS,CAAEd,OAAQoB,EAAMC,OAAOtB,QAGrC,EAAKuB,aAAa,EAAKf,MAAMP,S,uDAnBjC,WACIuB,KAAKb,kB,0BAqBT,SAAaV,GAAS,IAAD,OAChBuB,KAAKhB,MAAMC,UAAUgB,KAAI,SAAAC,GACrB,GAAIA,EAASC,KAAKC,QAAU3B,EAAQ,CACjC,IACM4B,EADoB,EAAKrB,MAAMC,UAAUqB,QAAO,SAAAJ,GAAQ,OAAIA,EAASC,KAAKC,QAAU3B,KACnD,GACvCkB,QAAQC,IAAIS,GACZ,EAAKd,SAAS,CAAEL,QAASmB,QAKjCV,QAAQC,IAAII,KAAKhB,S,oBAGrB,WACI,OACI,gCACI,cAAC,EAAD,CACIJ,kBAAmBoB,KAAKpB,kBACxBK,UAAWe,KAAKhB,MAAMC,YAEzBe,KAAKhB,MAAMC,UAAUgB,KAAI,SAAAC,GAAQ,OAC9B,cAAC,EAAD,CAEI/B,QAAS+B,EAAS/B,QAAQoC,UAC1BtC,UAAWiC,EAASC,KAAKC,MACzBhC,SAAU8B,EAASC,KAAKK,KACxBlC,MAAO4B,EAASO,MAChBpC,IAAK6B,EAASQ,IAAIC,KALbT,EAASU,MAAMC,e,GArDxBC,aCWLC,MAVf,WACE,OACE,sBAAKpD,UAAU,YAAf,UACA,cAAC,EAAD,IACA,cAAC,EAAD,Q,MCJJqD,IAASC,OAEL,cAAC,EAAD,IAEFC,SAASC,eAAe,W","file":"static/js/main.7c81451f.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction NavBar() {\r\n    return (\r\n        <div className=\"container\" >\r\n            <div className=\"jumbotron\">\r\n                <h1>Employee Directory</h1>\r\n                <p>Filter by heading or use the search bar to narrow your results</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default NavBar;","import axios from \"axios\";\r\nconst BASEURL = \"https://randomuser.me/api/?results=10\"\r\n\r\nexport default {\r\n  getEmployees: function () {\r\n    return axios.get(BASEURL);\r\n  },\r\n};","import React from \"react\";\r\n\r\nfunction EmployeeCard(props) {\r\n    return (\r\n      <div>\r\n         <img alt={props.FirstName} src={props.picture} />\r\n          {props.FirstName} {props.LastName}, Age: {props.DoB}, email: {props.Email}\r\n         \r\n      </div>\r\n    );\r\n  }\r\n  \r\n  export default EmployeeCard;","import React from \"react\";\r\n\r\nfunction SearchBar(props) {\r\n  return (\r\n    <form className=\"search\">\r\n      <div className=\"form-group\">\r\n\r\n        <input\r\n          value={props.search}\r\n          type=\"text\"\r\n          onChange={props.handleInputChange}\r\n          className=\"form-control\"\r\n          placeholder=\"search by first name\"\r\n          id=\"Search\"\r\n        />\r\n        {/* datalist tag is used to provide an autocomplete feature.  */}\r\n        {/* <datalist id=\"Employees\">\r\n          {props.Employees.map(employee => (\r\n            <option\r\n              value={employee.name.first}\r\n              key={employee.login.md5}\r\n            />\r\n          ))}\r\n        </datalist> */}\r\n      </div>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default SearchBar;","import React, { Component } from \"react\";\nimport API from \"../utils/API\";\nimport EmployeeCard from \"../components/EmployeeCard\";\nimport SearchBar from \"../components/SearchBar\";\n\nclass Table extends Component {\n    state = {\n        Employees: [],\n        search: \"\",\n        results: {},\n    };\n\n    // When the component mounts, get a list of all available base breeds and update this.state.breeds\n    componentDidMount() {\n        this.loadEmployees();\n    }\n\n    loadEmployees = () => {\n        API.getEmployees()\n            .then(res =>\n                this.setState({\n                    Employees: res.data.results\n                })\n            )\n            .catch(err => console.log(err))\n    };\n\n    // changes the filter/search criteria on every key click in the search bar\n    handleInputChange = event => {\n        this.setState({ search: event.target.value });\n        // const currentState = [this.state.Employees]\n       \n        this.handleFilter(this.state.search)\n    };\n// ! instead of trying to update/append maybe we should try to create another state value as a placeholder and if it has a valuer then the employeecard changes state\n    handleFilter(search) {\n         this.state.Employees.map(employee => {\n             if (employee.name.first === search) {\n                const filteredEmployees = this.state.Employees.filter(employee => employee.name.first === search)\n                const employeeFile = filteredEmployees[0]\n                console.log(employeeFile)\n                this.setState({ results: employeeFile})\n            }\n            // this.setState({...this.state});\n        })\n        // this.setState(updatedList);\n        console.log(this.state)\n    }\n\n    render() {\n        return (\n            <div>\n                <SearchBar\n                    handleInputChange={this.handleInputChange}\n                    Employees={this.state.Employees}\n                />\n                {this.state.Employees.map(employee => (\n                    <EmployeeCard\n                        key={employee.login.md5}\n                        picture={employee.picture.thumbnail}\n                        FirstName={employee.name.first}\n                        LastName={employee.name.last}\n                        Email={employee.email}\n                        DoB={employee.dob.age}\n\n                    // need to pass more variables to be used as props.whatevers in the employeecard\n                    />\n                ))}\n            </div>\n\n        );\n    }\n}\n\nexport default Table;","// import logo from './logo.svg';\n// import './App.css';\nimport React from \"react\";\nimport NavBar from \"./components/NavBar\";\nimport Table from \"./components/Table\";\n\nfunction App() {\n  return (\n    <div className=\"container\">\n    <NavBar/>\n    <Table/> \n    </div>\n\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  // <React.StrictMode>\n    <App />,\n  // </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}